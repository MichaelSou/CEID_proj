
erg_ask5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00802800  00802800  00000634  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033d1  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023d0  00000000  00000000  00003afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070c  00000000  00000000  00005ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  000065dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001812  00000000  00000000  000067a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bb  00000000  00000000  00007fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00008575  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_9>
  28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_10>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_23>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	ac 30       	cpi	r26, 0x0C	; 12
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  b0:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <LED_init>:
int menu_select = 0; // ματαβλητή για επιλογές μενού
int pass_atempts = 0;

void LED_init(void)//αρχικοποιηση LED
{
	PORTD.DIR |= PIN0_bm; //PIN is output
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm; //LED is off
  c2:	84 81       	ldd	r24, Z+4	; 0x04
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	84 83       	std	Z+4, r24	; 0x04
	PORTD.DIR |= PIN1_bm; //PIN is output
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
	PORTD.OUT |= PIN1_bm; //LED is off
  ce:	84 81       	ldd	r24, Z+4	; 0x04
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	84 83       	std	Z+4, r24	; 0x04
	PORTD.DIR |= PIN2_bm; //PIN is output
  d4:	80 81       	ld	r24, Z
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	80 83       	st	Z, r24
	PORTD.OUT |= PIN2_bm; //LED is off
  da:	84 81       	ldd	r24, Z+4	; 0x04
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	84 83       	std	Z+4, r24	; 0x04
	PORTD.DIR |= PIN3_bm; //PIN is output
  e0:	80 81       	ld	r24, Z
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm; //LED is off
  e6:	84 81       	ldd	r24, Z+4	; 0x04
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	84 83       	std	Z+4, r24	; 0x04
  ec:	08 95       	ret

000000ee <LED0>:
}
void LED0(int status) //LED θερμοσίφωνα
{
	if (status == 1)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 05       	cpc	r25, r1
  f2:	29 f4       	brne	.+10     	; 0xfe <LED0+0x10>
	{
		/* LED(ON) */
		PORTD.OUT &= ~PIN0_bm;
  f4:	e0 e6       	ldi	r30, 0x60	; 96
  f6:	f4 e0       	ldi	r31, 0x04	; 4
  f8:	24 81       	ldd	r18, Z+4	; 0x04
  fa:	2e 7f       	andi	r18, 0xFE	; 254
  fc:	24 83       	std	Z+4, r18	; 0x04
	}
	if (status == 0)
  fe:	89 2b       	or	r24, r25
 100:	29 f4       	brne	.+10     	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
	{
		/* LED(OFF) */
		PORTD.OUT |= PIN0_bm;
 102:	e0 e6       	ldi	r30, 0x60	; 96
 104:	f4 e0       	ldi	r31, 0x04	; 4
 106:	84 81       	ldd	r24, Z+4	; 0x04
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	84 83       	std	Z+4, r24	; 0x04
 10c:	08 95       	ret

0000010e <LED1>:
	}
}
void LED1(int status)// LED anemisthra
{
	if (status == 1)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 05       	cpc	r25, r1
 112:	29 f4       	brne	.+10     	; 0x11e <LED1+0x10>
	{
		/* LED(ON) */
		PORTD.OUT &= ~PIN1_bm;
 114:	e0 e6       	ldi	r30, 0x60	; 96
 116:	f4 e0       	ldi	r31, 0x04	; 4
 118:	24 81       	ldd	r18, Z+4	; 0x04
 11a:	2d 7f       	andi	r18, 0xFD	; 253
 11c:	24 83       	std	Z+4, r18	; 0x04
	}
	if (status == 0)
 11e:	89 2b       	or	r24, r25
 120:	29 f4       	brne	.+10     	; 0x12c <LED1+0x1e>
	{
		/* LED(OFF) */
		PORTD.OUT |= PIN1_bm;
 122:	e0 e6       	ldi	r30, 0x60	; 96
 124:	f4 e0       	ldi	r31, 0x04	; 4
 126:	84 81       	ldd	r24, Z+4	; 0x04
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	84 83       	std	Z+4, r24	; 0x04
 12c:	08 95       	ret

0000012e <LED2>:
	}
}
void LED2(int status) // LED leak
{
	if (status == 1)
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	91 05       	cpc	r25, r1
 132:	29 f4       	brne	.+10     	; 0x13e <LED2+0x10>
	{
		/* LED(ON) */
		PORTD.OUT &= ~PIN2_bm;
 134:	e0 e6       	ldi	r30, 0x60	; 96
 136:	f4 e0       	ldi	r31, 0x04	; 4
 138:	24 81       	ldd	r18, Z+4	; 0x04
 13a:	2b 7f       	andi	r18, 0xFB	; 251
 13c:	24 83       	std	Z+4, r18	; 0x04
	}
	if (status == 0)
 13e:	89 2b       	or	r24, r25
 140:	29 f4       	brne	.+10     	; 0x14c <LED2+0x1e>
	{
		/* LED(OFF) */
		PORTD.OUT |= PIN2_bm;
 142:	e0 e6       	ldi	r30, 0x60	; 96
 144:	f4 e0       	ldi	r31, 0x04	; 4
 146:	84 81       	ldd	r24, Z+4	; 0x04
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	84 83       	std	Z+4, r24	; 0x04
 14c:	08 95       	ret

0000014e <LED3>:
	}
}
void LED3(int status) //LED LOCK
{
	if (status == 1)
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	91 05       	cpc	r25, r1
 152:	29 f4       	brne	.+10     	; 0x15e <LED3+0x10>
	{
		/* LED(ON) */
		PORTD.OUT &= ~PIN3_bm;
 154:	e0 e6       	ldi	r30, 0x60	; 96
 156:	f4 e0       	ldi	r31, 0x04	; 4
 158:	24 81       	ldd	r18, Z+4	; 0x04
 15a:	27 7f       	andi	r18, 0xF7	; 247
 15c:	24 83       	std	Z+4, r18	; 0x04
	}
	if (status == 0)
 15e:	89 2b       	or	r24, r25
 160:	29 f4       	brne	.+10     	; 0x16c <LED3+0x1e>
	{
		/* LED(OFF) */
		PORTD.OUT |= PIN3_bm;
 162:	e0 e6       	ldi	r30, 0x60	; 96
 164:	f4 e0       	ldi	r31, 0x04	; 4
 166:	84 81       	ldd	r24, Z+4	; 0x04
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	84 83       	std	Z+4, r24	; 0x04
 16c:	08 95       	ret

0000016e <thermo>:

//συναρτηση για τον θερμοσίφωνα αν ειναι κλειστός ανοιγει και ενεργοποιει τον timer
//αν ειναι ανοιχτός τοτε τον κλείνει και απενεργοποιει τον timer
void thermo()
{
	if (thermos = 0)
 16e:	10 92 0a 28 	sts	0x280A, r1	; 0x80280a <thermos>
 172:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <thermos+0x1>
		TCA0.SINGLE.CTRLA |=1;//Enable
		TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm; //Interrupt Enable (=0x10)
	}
	else
	{
		LED0(0);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 77 00 	call	0xee	; 0xee <LED0>
		TCA0.SINGLE.CTRLA |=0;//Disable
 17e:	e0 e0       	ldi	r30, 0x00	; 0
 180:	fa e0       	ldi	r31, 0x0A	; 10
 182:	80 81       	ld	r24, Z
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <__vector_9>:
}


//interrupt timer  αν το σπιτι ειναι ξεκλείδωτο τοτε ελέγχει αν πατη8ηκε το switch 5 και συνεχίζει να αναβει ο θερμοσύφωνας
// αν το σπιτι ειναι κλειδωμενο τοτε απενεργοποιει τον timer και τον κλειδωνει τελειως
ISR(TCA0_CMP0_vect){
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	LED0(0);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 77 00 	call	0xee	; 0xee <LED0>
	TCA0.SINGLE.CTRLA = 0; //Disable
 1b2:	e0 e0       	ldi	r30, 0x00	; 0
 1b4:	fa e0       	ldi	r31, 0x0A	; 10
 1b6:	10 82       	st	Z, r1
	//clear flag
	int intflags = TCA0.SINGLE.INTFLAGS;
 1b8:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS=intflags;
 1ba:	83 87       	std	Z+11, r24	; 0x0b
	int switflags = PORTF.INTFLAGS;
 1bc:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>

	if (lock == 0)
 1c0:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <lock>
 1c4:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <lock+0x1>
 1c8:	89 2b       	or	r24, r25
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <__vector_9+0x60>
	{
		if (switflags == 32)
 1cc:	20 32       	cpi	r18, 0x20	; 32
 1ce:	d9 f4       	brne	.+54     	; 0x206 <__vector_9+0x7e>
		{
			LED0(1);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 77 00 	call	0xee	; 0xee <LED0>
			TCA0.SINGLE.CTRLA |=1;//Enable
 1d8:	e0 e0       	ldi	r30, 0x00	; 0
 1da:	fa e0       	ldi	r31, 0x0A	; 10
 1dc:	80 81       	ld	r24, Z
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	80 83       	st	Z, r24
			TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm; //Interrupt Enable (=0x10)
 1e2:	80 e1       	ldi	r24, 0x10	; 16
 1e4:	82 87       	std	Z+10, r24	; 0x0a
 1e6:	0f c0       	rjmp	.+30     	; 0x206 <__vector_9+0x7e>
		}
	}
	else
	{
		TCA0.SINGLE.CTRLA &= (~TCA_SINGLE_ENABLE_bm);
 1e8:	e0 e0       	ldi	r30, 0x00	; 0
 1ea:	fa e0       	ldi	r31, 0x0A	; 10
 1ec:	80 81       	ld	r24, Z
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	80 83       	st	Z, r24
		LED3(1);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 a7 00 	call	0x14e	; 0x14e <LED3>
		menu_select = 4;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <menu_select>
 202:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <menu_select+0x1>
	}


}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <anemisthras>:

//συνάρτηση για τον ανεμμηστίρα αν ειναι κλειστος ενεργοποιει τον PWM και αυτος αναβοσβήνει το λαμπάκι
//αν ειναι ανοιχτός τον κλείνει και απενεργοποιει το interrupt του PWM.
void anemisthras()
{
	if (anemist == 0)
 228:	80 91 08 28 	lds	r24, 0x2808	; 0x802808 <anemist>
 22c:	90 91 09 28 	lds	r25, 0x2809	; 0x802809 <anemist+0x1>
 230:	89 2b       	or	r24, r25
 232:	49 f4       	brne	.+18     	; 0x246 <anemisthras+0x1e>
	{
		//enable interrupt COMP1
		TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP1_bm;
 234:	e0 e0       	ldi	r30, 0x00	; 0
 236:	fa e0       	ldi	r31, 0x0A	; 10
 238:	82 85       	ldd	r24, Z+10	; 0x0a
 23a:	80 62       	ori	r24, 0x20	; 32
 23c:	82 87       	std	Z+10, r24	; 0x0a
		TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm; //Enable
 23e:	80 81       	ld	r24, Z
 240:	81 60       	ori	r24, 0x01	; 1
 242:	80 83       	st	Z, r24
 244:	08 95       	ret
	}
	else
	{
		LED1(0);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 87 00 	call	0x10e	; 0x10e <LED1>
		TCA0.SINGLE.CTRLA &= ~TCA_SINGLE_ENABLE_bm; //Enable
 24e:	e0 e0       	ldi	r30, 0x00	; 0
 250:	fa e0       	ldi	r31, 0x0A	; 10
 252:	80 81       	ld	r24, Z
 254:	8e 7f       	andi	r24, 0xFE	; 254
 256:	80 83       	st	Z, r24
 258:	08 95       	ret

0000025a <__vector_10>:
	}
}


//interupt του PWM οταν εκτελεστεί το interrupt τοτε αναβοσβήνει το LED για τον ανεμιστήρα.
ISR(TCA0_CMP1_vect){
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	//clear the interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
 27c:	e0 e0       	ldi	r30, 0x00	; 0
 27e:	fa e0       	ldi	r31, 0x0A	; 10
 280:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 282:	83 87       	std	Z+11, r24	; 0x0b
	LED1(1);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 87 00 	call	0x10e	; 0x10e <LED1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	89 ef       	ldi	r24, 0xF9	; 249
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <__vector_10+0x36>
 294:	00 c0       	rjmp	.+0      	; 0x296 <__vector_10+0x3c>
 296:	00 00       	nop
	_delay_ms(1);
	LED1(0);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 87 00 	call	0x10e	; 0x10e <LED1>
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <waterleak>:

//συνρατηση που καλείται οταν το χρήστης παταει το switch 6 και υπαρχει διαροη
// η συναρτηση σβήνει το led2 το οποιο ειναι του leak.
void waterleak()
{
	if (leak == 1)
 2c2:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <leak>
 2c6:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <leak+0x1>
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	21 f4       	brne	.+8      	; 0x2d6 <waterleak+0x14>
	{	
		LED2(0);
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 97 00 	call	0x12e	; 0x12e <LED2>
 2d6:	08 95       	ret

000002d8 <switch_password>:
 2d8:	89 ef       	ldi	r24, 0xF9	; 249
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <switch_password+0x4>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <switch_password+0xa>
 2e2:	00 00       	nop
//η switch_password() δεχεται εναν κωδικο (μοτιβο) απο του διακόπτες και αν ειναι σωστό επιστρέφει 1
// αν ειναι λάθος η μεταβλητη pass_atmepts αυξάνεται κατα ένα και οταν πάρει την τιμή 3 τοτε η συνάρτηση επιστρέφει την τιμη 0.
int switch_password()
{
	_delay_ms(1);
	int pass1 = PORTF.INTFLAGS;
 2e4:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
	if (pass1 == 32)
 2e8:	80 32       	cpi	r24, 0x20	; 32
 2ea:	a1 f4       	brne	.+40     	; 0x314 <switch_password+0x3c>
 2ec:	89 ef       	ldi	r24, 0xF9	; 249
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <switch_password+0x18>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <switch_password+0x1e>
 2f6:	00 00       	nop
	{
		_delay_ms(1);
		int pass2 = PORTF.INTFLAGS;
 2f8:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		if (pass2 == 64)
 2fc:	80 34       	cpi	r24, 0x40	; 64
 2fe:	51 f4       	brne	.+20     	; 0x314 <switch_password+0x3c>
 300:	89 ef       	ldi	r24, 0xF9	; 249
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <switch_password+0x2c>
 308:	00 c0       	rjmp	.+0      	; 0x30a <switch_password+0x32>
 30a:	00 00       	nop
		{
			_delay_ms(1);
			int pass3 = PORTF.INTFLAGS;
 30c:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
			if (pass3 == 32)
 310:	80 32       	cpi	r24, 0x20	; 32
 312:	79 f0       	breq	.+30     	; 0x332 <switch_password+0x5a>
			{
				return 1;
			}
		}
	}
	if (pass_atempts < 3)
 314:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 318:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	91 05       	cpc	r25, r1
 320:	5c f4       	brge	.+22     	; 0x338 <switch_password+0x60>
	{
		pass_atempts++;
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 328:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
		switch_password();
 32c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <switch_password>
	else
	{
		return 0;
	}

}
 330:	08 95       	ret
		{
			_delay_ms(1);
			int pass3 = PORTF.INTFLAGS;
			if (pass3 == 32)
			{
				return 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	08 95       	ret
		pass_atempts++;
		switch_password();
	}
	else
	{
		return 0;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
	}

}
 33c:	08 95       	ret

0000033e <house_lock>:
//η συναρτηση house_lock() αν το σπιτι ειναι ξεκλειδωτο το κλειδωνει και απενεργοποιει το σύστημα
//και να ειναι κλειδωμενο τοτε καλει την switch_password() για να εισαγει τον κωδικο ο χρήστης και αναλογα με το αποτελεσμα
//είτε κλειδώνει τελειως το σπίτι (σε περιπτωση λαθος κωδικού) ή ξεκλειδώνει το σπιτι (σε περιπτωση σωστού κωδικού)
void house_lock()
{
	if (lock == 0)
 33e:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <lock>
 342:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <lock+0x1>
 346:	89 2b       	or	r24, r25
 348:	89 f4       	brne	.+34     	; 0x36c <house_lock+0x2e>
	{
		lock = 1; // κλειδώνει το σύστημα.
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <lock>
 352:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <lock+0x1>
		ADC0.CTRLA &= ~ADC_ENABLE_bm;//disable adc
 356:	e0 e0       	ldi	r30, 0x00	; 0
 358:	f6 e0       	ldi	r31, 0x06	; 6
 35a:	80 81       	ld	r24, Z
 35c:	8e 7f       	andi	r24, 0xFE	; 254
 35e:	80 83       	st	Z, r24
		TCA0.SINGLE.CTRLA &= ~TCA_SINGLE_ENABLE_bm; //disable timer
 360:	e0 e0       	ldi	r30, 0x00	; 0
 362:	fa e0       	ldi	r31, 0x0A	; 10
 364:	80 81       	ld	r24, Z
 366:	8e 7f       	andi	r24, 0xFE	; 254
 368:	80 83       	st	Z, r24
 36a:	08 95       	ret

	}
	else
	{
		int temp = switch_password(); //τρέχει η συνάρτηση για την εισαγωγή κωδικού
 36c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <switch_password>
		if (temp == 0)//αν ο κωδικός ειναι λάθος κλειδώνει το σύστημα και δεν μπορει να γινει καμια αλλη ενέργεια.
 370:	89 2b       	or	r24, r25
 372:	59 f4       	brne	.+22     	; 0x38a <house_lock+0x4c>
		{
			LED3(1);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 a7 00 	call	0x14e	; 0x14e <LED3>
			menu_select = 4;
 37c:	84 e0       	ldi	r24, 0x04	; 4
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <menu_select>
 384:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <menu_select+0x1>
 388:	08 95       	ret
		}
		else//αν ο κωδικός ειναι σωστος ξεκλειδωνει και ενεργοποιει το σύστημα.
		{
			lock = 0;
 38a:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <lock>
 38e:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <lock+0x1>
			ADC0.CTRLA |= ADC_ENABLE_bm;
 392:	e0 e0       	ldi	r30, 0x00	; 0
 394:	f6 e0       	ldi	r31, 0x06	; 6
 396:	80 81       	ld	r24, Z
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	80 83       	st	Z, r24
			TCA0.SINGLE.CTRLA &= (~TCA_SINGLE_ENABLE_bm);//disable timer
 39c:	e0 e0       	ldi	r30, 0x00	; 0
 39e:	fa e0       	ldi	r31, 0x0A	; 10
 3a0:	80 81       	ld	r24, Z
 3a2:	8e 7f       	andi	r24, 0xFE	; 254
 3a4:	80 83       	st	Z, r24
 3a6:	08 95       	ret

000003a8 <__vector_23>:
}


//Το interrupt του ADC αν το σπιτι ειναι κλειδωμενο αναβει το led3 ενεργοποιει τον timer και τρεχει την house_lock()
// αν το σπιτι δεν ειναι κλειδωμενο τοτε αναβει το led 2 και κανει την μεταβλητη leak=1 γιατι εχει βρει διαροή
ISR(ADC0_WCOMP_vect){
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	3f 93       	push	r19
 3b6:	4f 93       	push	r20
 3b8:	5f 93       	push	r21
 3ba:	6f 93       	push	r22
 3bc:	7f 93       	push	r23
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
 3c6:	ef 93       	push	r30
 3c8:	ff 93       	push	r31
	int intflags = ADC0.INTFLAGS;
 3ca:	e0 e0       	ldi	r30, 0x00	; 0
 3cc:	f6 e0       	ldi	r31, 0x06	; 6
 3ce:	83 85       	ldd	r24, Z+11	; 0x0b
	ADC0.INTFLAGS = intflags;
 3d0:	83 87       	std	Z+11, r24	; 0x0b
	if (lock == 0)
 3d2:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <lock>
 3d6:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <lock+0x1>
 3da:	89 2b       	or	r24, r25
 3dc:	59 f4       	brne	.+22     	; 0x3f4 <__vector_23+0x4c>
	{
		LED2(1);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 97 00 	call	0x12e	; 0x12e <LED2>
		leak = 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <leak>
 3ee:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <leak+0x1>
 3f2:	0b c0       	rjmp	.+22     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	}
	else
	{
		LED3(1);
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 a7 00 	call	0x14e	; 0x14e <LED3>
		TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm; //enable
 3fc:	e0 e0       	ldi	r30, 0x00	; 0
 3fe:	fa e0       	ldi	r31, 0x0A	; 10
 400:	80 81       	ld	r24, Z
 402:	81 60       	ori	r24, 0x01	; 1
 404:	80 83       	st	Z, r24
		house_lock();
 406:	0e 94 9f 01 	call	0x33e	; 0x33e <house_lock>
	}
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <main>:
//στην main αρχικοποιουμε αρκετα απο τα πραγματα που θα χρησιμοποιήσουμε.
//Οπως επίσης εχουμε φτιάξει με while και if το βασικό μενού για τις επιλογέ του χρήστη.

int main()
{
	LED_init();// αρχικοποίηση των LED
 42c:	0e 94 5c 00 	call	0xb8	; 0xb8 <LED_init>
	

	//αρχικοποίηση του ADC για Free-Running mode
	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc; //10-bit resolution
 430:	e0 e0       	ldi	r30, 0x00	; 0
 432:	f6 e0       	ldi	r31, 0x06	; 6
 434:	80 81       	ld	r24, Z
 436:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_FREERUN_bm; //Free-Running mode enabled
 438:	80 81       	ld	r24, Z
 43a:	82 60       	ori	r24, 0x02	; 2
 43c:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_ENABLE_bm; //Enable ADC
 43e:	80 81       	ld	r24, Z
 440:	81 60       	ori	r24, 0x01	; 1
 442:	80 83       	st	Z, r24
	ADC0.MUXPOS |= ADC_MUXPOS_AIN7_gc; //The bit
 444:	86 81       	ldd	r24, Z+6	; 0x06
 446:	87 60       	ori	r24, 0x07	; 7
 448:	86 83       	std	Z+6, r24	; 0x06
	//Debug Mode
	ADC0.DBGCTRL |= ADC_DBGRUN_bm;
 44a:	84 85       	ldd	r24, Z+12	; 0x0c
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	84 87       	std	Z+12, r24	; 0x0c
	//Window Comparator Mode
	ADC0.WINLT = 3;
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	82 8b       	std	Z+18, r24	; 0x12
 456:	93 8b       	std	Z+19, r25	; 0x13
	ADC0.WINHT |= 10; //Set threshold
 458:	84 89       	ldd	r24, Z+20	; 0x14
 45a:	95 89       	ldd	r25, Z+21	; 0x15
 45c:	8a 60       	ori	r24, 0x0A	; 10
 45e:	84 8b       	std	Z+20, r24	; 0x14
 460:	95 8b       	std	Z+21, r25	; 0x15
	ADC0.INTCTRL |= ADC_WCMP_bm; //ενεργοποίηση Interrupts για WCM
 462:	82 85       	ldd	r24, Z+10	; 0x0a
 464:	82 60       	ori	r24, 0x02	; 2
 466:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE |= ADC_WINCM0_bm; //Interrupt οταν RESULT < WINLT
 468:	84 81       	ldd	r24, Z+4	; 0x04
 46a:	81 60       	ori	r24, 0x01	; 1
 46c:	84 83       	std	Z+4, r24	; 0x04


	TCA0.SINGLE.CNT = 0; //clear counter
 46e:	a0 e0       	ldi	r26, 0x00	; 0
 470:	ba e0       	ldi	r27, 0x0A	; 10
 472:	90 96       	adiw	r26, 0x20	; 32
 474:	1d 92       	st	X+, r1
 476:	1c 92       	st	X, r1
 478:	91 97       	sbiw	r26, 0x21	; 33
	TCA0.SINGLE.CTRLB = 0; //Normal Mode (TCA_SINGLE_WGMODE_NORMAL_gc σελ 207)
 47a:	11 96       	adiw	r26, 0x01	; 1
 47c:	1c 92       	st	X, r1
 47e:	11 97       	sbiw	r26, 0x01	; 1
	TCA0.SINGLE.CMP0 = ped; //When reaches this value -> interrupt CLOCK FREQUENCY/1024
 480:	84 e1       	ldi	r24, 0x14	; 20
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	98 96       	adiw	r26, 0x28	; 40
 486:	8d 93       	st	X+, r24
 488:	9c 93       	st	X, r25
 48a:	99 97       	sbiw	r26, 0x29	; 41
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc; 
 48c:	8e e0       	ldi	r24, 0x0E	; 14
 48e:	8c 93       	st	X, r24


	//prescaler=1024
	TCA0.SINGLE.CTRLA=TCA_SINGLE_CLKSEL_DIV1024_gc;
 490:	8c 93       	st	X, r24
	TCA0.SINGLE.PER = 254; //select the resolution
 492:	8e ef       	ldi	r24, 0xFE	; 254
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	96 96       	adiw	r26, 0x26	; 38
 498:	8d 93       	st	X+, r24
 49a:	9c 93       	st	X, r25
 49c:	97 97       	sbiw	r26, 0x27	; 39
	TCA0.SINGLE.CMP1 = 127; //select the duty cycle
 49e:	8f e7       	ldi	r24, 0x7F	; 127
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	9a 96       	adiw	r26, 0x2a	; 42
 4a4:	8d 93       	st	X+, r24
 4a6:	9c 93       	st	X, r25
 4a8:	9b 97       	sbiw	r26, 0x2b	; 43
	//select Single_Slope_PWM
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
 4aa:	11 96       	adiw	r26, 0x01	; 1
 4ac:	8c 91       	ld	r24, X
 4ae:	11 97       	sbiw	r26, 0x01	; 1
 4b0:	83 60       	ori	r24, 0x03	; 3
 4b2:	11 96       	adiw	r26, 0x01	; 1
 4b4:	8c 93       	st	X, r24


	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 4b6:	a0 ea       	ldi	r26, 0xA0	; 160
 4b8:	b4 e0       	ldi	r27, 0x04	; 4
 4ba:	55 96       	adiw	r26, 0x15	; 21
 4bc:	8c 91       	ld	r24, X
 4be:	55 97       	sbiw	r26, 0x15	; 21
 4c0:	89 60       	ori	r24, 0x09	; 9
 4c2:	55 96       	adiw	r26, 0x15	; 21
 4c4:	8c 93       	st	X, r24
 4c6:	55 97       	sbiw	r26, 0x15	; 21
	PORTF.PIN6CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 4c8:	56 96       	adiw	r26, 0x16	; 22
 4ca:	8c 91       	ld	r24, X
 4cc:	56 97       	sbiw	r26, 0x16	; 22
 4ce:	89 60       	ori	r24, 0x09	; 9
 4d0:	56 96       	adiw	r26, 0x16	; 22
 4d2:	8c 93       	st	X, r24
	sei();
 4d4:	78 94       	sei
	ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion
 4d6:	80 85       	ldd	r24, Z+8	; 0x08
 4d8:	81 60       	ori	r24, 0x01	; 1
 4da:	80 87       	std	Z+8, r24	; 0x08
 4dc:	13 c0       	rjmp	.+38     	; 0x504 <main+0xd8>
    while (1) 
    {
		while(menu_select == 0)
		{
			int intflags = PORTF.INTFLAGS;
 4de:	e0 ea       	ldi	r30, 0xA0	; 160
 4e0:	f4 e0       	ldi	r31, 0x04	; 4
 4e2:	41 85       	ldd	r20, Z+9	; 0x09
 4e4:	24 2f       	mov	r18, r20
 4e6:	30 e0       	ldi	r19, 0x00	; 0
			PORTF.INTFLAGS = intflags;
 4e8:	41 87       	std	Z+9, r20	; 0x09
			if (intflags == 32)
 4ea:	20 32       	cpi	r18, 0x20	; 32
 4ec:	31 05       	cpc	r19, r1
 4ee:	29 f4       	brne	.+10     	; 0x4fa <main+0xce>
			{
				menu_select++;
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <menu_select>
 4f6:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <menu_select+0x1>
			}
			if (intflags == 64)
 4fa:	20 34       	cpi	r18, 0x40	; 64
 4fc:	31 05       	cpc	r19, r1
 4fe:	11 f4       	brne	.+4      	; 0x504 <main+0xd8>
			{
				thermo();
 500:	0e 94 b7 00 	call	0x16e	; 0x16e <thermo>
	PORTF.PIN6CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
	sei();
	ADC0.COMMAND |= ADC_STCONV_bm; //Start Conversion
    while (1) 
    {
		while(menu_select == 0)
 504:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <menu_select>
 508:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <menu_select+0x1>
 50c:	00 97       	sbiw	r24, 0x00	; 0
 50e:	39 f3       	breq	.-50     	; 0x4de <main+0xb2>
 510:	14 c0       	rjmp	.+40     	; 0x53a <main+0x10e>
				thermo();
			}
		}
		while(menu_select == 1)
		{
			int intflags = PORTF.INTFLAGS;
 512:	e0 ea       	ldi	r30, 0xA0	; 160
 514:	f4 e0       	ldi	r31, 0x04	; 4
 516:	21 85       	ldd	r18, Z+9	; 0x09
 518:	82 2f       	mov	r24, r18
 51a:	90 e0       	ldi	r25, 0x00	; 0
			PORTF.INTFLAGS = intflags;
 51c:	21 87       	std	Z+9, r18	; 0x09
			if (intflags == 32)
 51e:	80 32       	cpi	r24, 0x20	; 32
 520:	91 05       	cpc	r25, r1
 522:	31 f4       	brne	.+12     	; 0x530 <main+0x104>
			{
				menu_select++;
 524:	4f 5f       	subi	r20, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	40 93 02 28 	sts	0x2802, r20	; 0x802802 <menu_select>
 52c:	50 93 03 28 	sts	0x2803, r21	; 0x802803 <menu_select+0x1>
			}
			if (intflags == 64)
 530:	80 34       	cpi	r24, 0x40	; 64
 532:	91 05       	cpc	r25, r1
 534:	11 f4       	brne	.+4      	; 0x53a <main+0x10e>
			{
				anemisthras();
 536:	0e 94 14 01 	call	0x228	; 0x228 <anemisthras>
			if (intflags == 64)
			{
				thermo();
			}
		}
		while(menu_select == 1)
 53a:	40 91 02 28 	lds	r20, 0x2802	; 0x802802 <menu_select>
 53e:	50 91 03 28 	lds	r21, 0x2803	; 0x802803 <menu_select+0x1>
 542:	41 30       	cpi	r20, 0x01	; 1
 544:	51 05       	cpc	r21, r1
 546:	29 f3       	breq	.-54     	; 0x512 <main+0xe6>
 548:	14 c0       	rjmp	.+40     	; 0x572 <main+0x146>
				anemisthras();
			}
		}
		while(menu_select == 2)
		{
			int intflags = PORTF.INTFLAGS;
 54a:	e0 ea       	ldi	r30, 0xA0	; 160
 54c:	f4 e0       	ldi	r31, 0x04	; 4
 54e:	21 85       	ldd	r18, Z+9	; 0x09
 550:	82 2f       	mov	r24, r18
 552:	90 e0       	ldi	r25, 0x00	; 0
			PORTF.INTFLAGS = intflags;
 554:	21 87       	std	Z+9, r18	; 0x09
			if (intflags == 32)
 556:	80 32       	cpi	r24, 0x20	; 32
 558:	91 05       	cpc	r25, r1
 55a:	31 f4       	brne	.+12     	; 0x568 <main+0x13c>
			{
				menu_select++;
 55c:	4f 5f       	subi	r20, 0xFF	; 255
 55e:	5f 4f       	sbci	r21, 0xFF	; 255
 560:	40 93 02 28 	sts	0x2802, r20	; 0x802802 <menu_select>
 564:	50 93 03 28 	sts	0x2803, r21	; 0x802803 <menu_select+0x1>
			}
			if (intflags == 64)
 568:	80 34       	cpi	r24, 0x40	; 64
 56a:	91 05       	cpc	r25, r1
 56c:	11 f4       	brne	.+4      	; 0x572 <main+0x146>
			{
				waterleak();
 56e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <waterleak>
			if (intflags == 64)
			{
				anemisthras();
			}
		}
		while(menu_select == 2)
 572:	40 91 02 28 	lds	r20, 0x2802	; 0x802802 <menu_select>
 576:	50 91 03 28 	lds	r21, 0x2803	; 0x802803 <menu_select+0x1>
 57a:	42 30       	cpi	r20, 0x02	; 2
 57c:	51 05       	cpc	r21, r1
 57e:	29 f3       	breq	.-54     	; 0x54a <main+0x11e>
 580:	12 c0       	rjmp	.+36     	; 0x5a6 <main+0x17a>
				waterleak();
			}
		}
		while(menu_select == 3)
		{
			int intflags = PORTF.INTFLAGS;
 582:	e0 ea       	ldi	r30, 0xA0	; 160
 584:	f4 e0       	ldi	r31, 0x04	; 4
 586:	21 85       	ldd	r18, Z+9	; 0x09
 588:	82 2f       	mov	r24, r18
 58a:	90 e0       	ldi	r25, 0x00	; 0
			PORTF.INTFLAGS = intflags;
 58c:	21 87       	std	Z+9, r18	; 0x09
			if (intflags == 32)
 58e:	80 32       	cpi	r24, 0x20	; 32
 590:	91 05       	cpc	r25, r1
 592:	21 f4       	brne	.+8      	; 0x59c <main+0x170>
			{
				menu_select = 0;
 594:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <menu_select>
 598:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <menu_select+0x1>
			}
			if (intflags == 64)
 59c:	80 34       	cpi	r24, 0x40	; 64
 59e:	91 05       	cpc	r25, r1
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <main+0x17a>
			{
				house_lock();
 5a2:	0e 94 9f 01 	call	0x33e	; 0x33e <house_lock>
			if (intflags == 64)
			{
				waterleak();
			}
		}
		while(menu_select == 3)
 5a6:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <menu_select>
 5aa:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <menu_select+0x1>
 5ae:	83 30       	cpi	r24, 0x03	; 3
 5b0:	91 05       	cpc	r25, r1
 5b2:	39 f3       	breq	.-50     	; 0x582 <main+0x156>
			if (intflags == 64)
			{
				house_lock();
			}
		}
		while (menu_select == 4)
 5b4:	84 30       	cpi	r24, 0x04	; 4
 5b6:	91 05       	cpc	r25, r1
 5b8:	e9 f3       	breq	.-6      	; 0x5b4 <main+0x188>
 5ba:	a4 cf       	rjmp	.-184    	; 0x504 <main+0xd8>

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
