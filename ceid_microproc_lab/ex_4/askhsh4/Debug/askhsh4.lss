
askhsh4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00802800  0000051c  000005b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00802806  00802806  000005b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dde  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022d0  00000000  00000000  00003476  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000480  00000000  00000000  00005746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00005bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000153c  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  00007288  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000075f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_9>
  28:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e2       	ldi	r17, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	ec e1       	ldi	r30, 0x1C	; 28
  a4:	f5 e0       	ldi	r31, 0x05	; 5
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	29 e2       	ldi	r18, 0x29	; 41
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b8 e2       	ldi	r27, 0x28	; 40
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  c6:	0c 94 8c 02 	jmp	0x518	; 0x518 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <LED_init>:
int last_input = -1; //μεταβλητη για να γνωριζουμε την τελευταια τιμη που προσθεσαμε.


void LED_init(void)
{
	PORTD.DIR |= PIN0_bm; //PIN is output
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f4 e0       	ldi	r31, 0x04	; 4
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm; //LED is off
  d8:	84 81       	ldd	r24, Z+4	; 0x04
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	84 83       	std	Z+4, r24	; 0x04
	PORTD.DIR |= PIN1_bm; //PIN is output
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
	PORTD.OUT |= PIN1_bm; //LED is off
  e4:	84 81       	ldd	r24, Z+4	; 0x04
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	84 83       	std	Z+4, r24	; 0x04
	PORTD.DIR |= PIN2_bm; //PIN is output
  ea:	80 81       	ld	r24, Z
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	80 83       	st	Z, r24
	PORTD.OUT |= PIN2_bm; //LED is off
  f0:	84 81       	ldd	r24, Z+4	; 0x04
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	84 83       	std	Z+4, r24	; 0x04
	PORTD.DIR |= PIN3_bm; //PIN is output
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
	PORTD.OUT |= PIN3_bm; //LED is off
  fc:	84 81       	ldd	r24, Z+4	; 0x04
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	84 83       	std	Z+4, r24	; 0x04
 102:	08 95       	ret

00000104 <LED0>:
}
void LED0(int status)
{
	if (status == 1)
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	29 f4       	brne	.+10     	; 0x114 <LED0+0x10>
	{
		/* LED(ON) */
		PORTD.OUT &= ~PIN0_bm;
 10a:	e0 e6       	ldi	r30, 0x60	; 96
 10c:	f4 e0       	ldi	r31, 0x04	; 4
 10e:	24 81       	ldd	r18, Z+4	; 0x04
 110:	2e 7f       	andi	r18, 0xFE	; 254
 112:	24 83       	std	Z+4, r18	; 0x04
	}
	if (status == 0)
 114:	89 2b       	or	r24, r25
 116:	29 f4       	brne	.+10     	; 0x122 <LED0+0x1e>
	{
		/* LED(OFF) */
		PORTD.OUT |= PIN0_bm;
 118:	e0 e6       	ldi	r30, 0x60	; 96
 11a:	f4 e0       	ldi	r31, 0x04	; 4
 11c:	84 81       	ldd	r24, Z+4	; 0x04
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	84 83       	std	Z+4, r24	; 0x04
 122:	08 95       	ret

00000124 <LED1>:
	}
}
void LED1(int status)
{
	if (status == 1)
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	91 05       	cpc	r25, r1
 128:	29 f4       	brne	.+10     	; 0x134 <LED1+0x10>
	{
		/* LED(ON) */
		PORTD.OUT &= ~PIN1_bm;
 12a:	e0 e6       	ldi	r30, 0x60	; 96
 12c:	f4 e0       	ldi	r31, 0x04	; 4
 12e:	24 81       	ldd	r18, Z+4	; 0x04
 130:	2d 7f       	andi	r18, 0xFD	; 253
 132:	24 83       	std	Z+4, r18	; 0x04
	}
	if (status == 0)
 134:	89 2b       	or	r24, r25
 136:	29 f4       	brne	.+10     	; 0x142 <LED1+0x1e>
	{
		/* LED(OFF) */
		PORTD.OUT |= PIN1_bm;
 138:	e0 e6       	ldi	r30, 0x60	; 96
 13a:	f4 e0       	ldi	r31, 0x04	; 4
 13c:	84 81       	ldd	r24, Z+4	; 0x04
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	84 83       	std	Z+4, r24	; 0x04
 142:	08 95       	ret

00000144 <LED2>:
	}
}
void LED2(int status)
{
	if (status == 1)
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	91 05       	cpc	r25, r1
 148:	29 f4       	brne	.+10     	; 0x154 <LED2+0x10>
	{
		/* LED(ON) */
		PORTD.OUT &= ~PIN2_bm;
 14a:	e0 e6       	ldi	r30, 0x60	; 96
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	24 81       	ldd	r18, Z+4	; 0x04
 150:	2b 7f       	andi	r18, 0xFB	; 251
 152:	24 83       	std	Z+4, r18	; 0x04
	}
	if (status == 0)
 154:	89 2b       	or	r24, r25
 156:	29 f4       	brne	.+10     	; 0x162 <LED2+0x1e>
	{
		/* LED(OFF) */
		PORTD.OUT |= PIN2_bm;
 158:	e0 e6       	ldi	r30, 0x60	; 96
 15a:	f4 e0       	ldi	r31, 0x04	; 4
 15c:	84 81       	ldd	r24, Z+4	; 0x04
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	84 83       	std	Z+4, r24	; 0x04
 162:	08 95       	ret

00000164 <LED3>:
	}
}
void LED3(int status)
{
	if (status == 1)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	91 05       	cpc	r25, r1
 168:	29 f4       	brne	.+10     	; 0x174 <LED3+0x10>
	{
		/* LED(ON) */
		PORTD.OUT &= ~PIN3_bm;
 16a:	e0 e6       	ldi	r30, 0x60	; 96
 16c:	f4 e0       	ldi	r31, 0x04	; 4
 16e:	24 81       	ldd	r18, Z+4	; 0x04
 170:	27 7f       	andi	r18, 0xF7	; 247
 172:	24 83       	std	Z+4, r18	; 0x04
	}
	if (status == 0)
 174:	89 2b       	or	r24, r25
 176:	29 f4       	brne	.+10     	; 0x182 <LED3+0x1e>
	{
		/* LED(OFF) */
		PORTD.OUT |= PIN3_bm;
 178:	e0 e6       	ldi	r30, 0x60	; 96
 17a:	f4 e0       	ldi	r31, 0x04	; 4
 17c:	84 81       	ldd	r24, Z+4	; 0x04
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	84 83       	std	Z+4, r24	; 0x04
 182:	08 95       	ret

00000184 <read>:


//διαβαζουμε απο την μνήμη
void read()
{
	LED0(memor[last_input][0]);
 184:	e0 91 04 28 	lds	r30, 0x2804	; 0x802804 <last_input>
 188:	f0 91 05 28 	lds	r31, 0x2805	; 0x802805 <last_input+0x1>
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ea 5f       	subi	r30, 0xFA	; 250
 19a:	f7 4d       	sbci	r31, 0xD7	; 215
 19c:	80 81       	ld	r24, Z
 19e:	91 81       	ldd	r25, Z+1	; 0x01
 1a0:	0e 94 82 00 	call	0x104	; 0x104 <LED0>
	LED1(memor[last_input][1]);
 1a4:	e0 91 04 28 	lds	r30, 0x2804	; 0x802804 <last_input>
 1a8:	f0 91 05 28 	lds	r31, 0x2805	; 0x802805 <last_input+0x1>
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	ea 5f       	subi	r30, 0xFA	; 250
 1ba:	f7 4d       	sbci	r31, 0xD7	; 215
 1bc:	82 81       	ldd	r24, Z+2	; 0x02
 1be:	93 81       	ldd	r25, Z+3	; 0x03
 1c0:	0e 94 92 00 	call	0x124	; 0x124 <LED1>
	LED2(memor[last_input][2]);
 1c4:	e0 91 04 28 	lds	r30, 0x2804	; 0x802804 <last_input>
 1c8:	f0 91 05 28 	lds	r31, 0x2805	; 0x802805 <last_input+0x1>
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	ea 5f       	subi	r30, 0xFA	; 250
 1da:	f7 4d       	sbci	r31, 0xD7	; 215
 1dc:	84 81       	ldd	r24, Z+4	; 0x04
 1de:	95 81       	ldd	r25, Z+5	; 0x05
 1e0:	0e 94 a2 00 	call	0x144	; 0x144 <LED2>
	LED3(memor[last_input][3]);
 1e4:	e0 91 04 28 	lds	r30, 0x2804	; 0x802804 <last_input>
 1e8:	f0 91 05 28 	lds	r31, 0x2805	; 0x802805 <last_input+0x1>
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	ea 5f       	subi	r30, 0xFA	; 250
 1fa:	f7 4d       	sbci	r31, 0xD7	; 215
 1fc:	86 81       	ldd	r24, Z+6	; 0x06
 1fe:	97 81       	ldd	r25, Z+7	; 0x07
 200:	0e 94 b2 00 	call	0x164	; 0x164 <LED3>
 204:	08 95       	ret

00000206 <write>:
}
//γραφουμε στην μνήμη με μια for και γραφουμε 0 ή 1 καθε θέση
void write()
{
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
	last_input++;
 20e:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <last_input>
 212:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <last_input+0x1>
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <last_input>
 21c:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <last_input+0x1>
	for (int i = 0; i < 4; i++)
 220:	00 e0       	ldi	r16, 0x00	; 0
 222:	10 e0       	ldi	r17, 0x00	; 0
 224:	1c c0       	rjmp	.+56     	; 0x25e <write+0x58>
	{
		memor[last_input][i] = rand() % 2; //η rand μας δινει ή 0 ή 1
 226:	c0 91 04 28 	lds	r28, 0x2804	; 0x802804 <last_input>
 22a:	d0 91 05 28 	lds	r29, 0x2805	; 0x802805 <last_input+0x1>
 22e:	0e 94 19 02 	call	0x432	; 0x432 <rand>
 232:	81 70       	andi	r24, 0x01	; 1
 234:	90 78       	andi	r25, 0x80	; 128
 236:	99 23       	and	r25, r25
 238:	24 f4       	brge	.+8      	; 0x242 <write+0x3c>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	8e 6f       	ori	r24, 0xFE	; 254
 23e:	9f 6f       	ori	r25, 0xFF	; 255
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	cc 0f       	add	r28, r28
 244:	dd 1f       	adc	r29, r29
 246:	cc 0f       	add	r28, r28
 248:	dd 1f       	adc	r29, r29
 24a:	c0 0f       	add	r28, r16
 24c:	d1 1f       	adc	r29, r17
 24e:	cc 0f       	add	r28, r28
 250:	dd 1f       	adc	r29, r29
 252:	ca 5f       	subi	r28, 0xFA	; 250
 254:	d7 4d       	sbci	r29, 0xD7	; 215
 256:	88 83       	st	Y, r24
 258:	99 83       	std	Y+1, r25	; 0x01
}
//γραφουμε στην μνήμη με μια for και γραφουμε 0 ή 1 καθε θέση
void write()
{
	last_input++;
	for (int i = 0; i < 4; i++)
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	1f 4f       	sbci	r17, 0xFF	; 255
 25e:	04 30       	cpi	r16, 0x04	; 4
 260:	11 05       	cpc	r17, r1
 262:	0c f3       	brlt	.-62     	; 0x226 <write+0x20>
	{
		memor[last_input][i] = rand() % 2; //η rand μας δινει ή 0 ή 1
	}
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <__vector_9>:
//cmp0 για το switch5 για να γραψουμε στη μνήμη
ISR(TCA0_CMP0_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	//clear the interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
 290:	e0 e0       	ldi	r30, 0x00	; 0
 292:	fa e0       	ldi	r31, 0x0A	; 10
 294:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 296:	83 87       	std	Z+11, r24	; 0x0b
	write();
 298:	0e 94 03 01 	call	0x206	; 0x206 <write>
}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <__vector_10>:

//cmp1 για το switch6 για να διαβασουμε απο την μνήμη
ISR(TCA0_CMP1_vect)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
	//clear the interrupt flag
	int intflags = TCA0.SINGLE.INTFLAGS;
 2e0:	e0 e0       	ldi	r30, 0x00	; 0
 2e2:	fa e0       	ldi	r31, 0x0A	; 10
 2e4:	83 85       	ldd	r24, Z+11	; 0x0b
	TCA0.SINGLE.INTFLAGS = intflags;
 2e6:	83 87       	std	Z+11, r24	; 0x0b
	read();
 2e8:	0e 94 c2 00 	call	0x184	; 0x184 <read>
}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_29>:

ISR(PORTF_PORT_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	8f 93       	push	r24
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
	//clear the interrupt flag
	int intflags = PORTF.INTFLAGS;
 31e:	e0 ea       	ldi	r30, 0xA0	; 160
 320:	f4 e0       	ldi	r31, 0x04	; 4
 322:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS=intflags;
 324:	81 87       	std	Z+9, r24	; 0x09
	//το 5ο pin εχει την τιμη 0x20 η οποια ειναι το 32 και ελεγχουμε ετσι
	//αν ο χρηστης πατησε το 5ο η το 6ο κουμπι και το interupt εκτελει τον αναλογο κωδικα
	//οταν παταμε το switch του pinctrl5 τοτε κανει write
	if (intflags == 32)
 326:	80 32       	cpi	r24, 0x20	; 32
 328:	49 f4       	brne	.+18     	; 0x33c <__vector_29+0x2e>
	{
		
		//enable interrupt CMP0
		TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;
 32a:	e0 e0       	ldi	r30, 0x00	; 0
 32c:	fa e0       	ldi	r31, 0x0A	; 10
 32e:	82 85       	ldd	r24, Z+10	; 0x0a
 330:	80 61       	ori	r24, 0x10	; 16
 332:	82 87       	std	Z+10, r24	; 0x0a
		TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm; //Enable
 334:	80 81       	ld	r24, Z
 336:	81 60       	ori	r24, 0x01	; 1
 338:	80 83       	st	Z, r24
 33a:	08 c0       	rjmp	.+16     	; 0x34c <__vector_29+0x3e>
	}
	//οταν παταμε το switch του pinctrl6 τοτε κανει read
	else{
		
		//enable interrupt CMP1
		TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP1_bm;
 33c:	e0 e0       	ldi	r30, 0x00	; 0
 33e:	fa e0       	ldi	r31, 0x0A	; 10
 340:	82 85       	ldd	r24, Z+10	; 0x0a
 342:	80 62       	ori	r24, 0x20	; 32
 344:	82 87       	std	Z+10, r24	; 0x0a
		TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm; //Enable
 346:	80 81       	ld	r24, Z
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	80 83       	st	Z, r24
	}

}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <main>:



int main()
{
	LED_init();
 35c:	0e 94 67 00 	call	0xce	; 0xce <LED_init>

	//prescaler=1024
	TCA0.SINGLE.CTRLA=TCA_SINGLE_CLKSEL_DIV1024_gc;
 360:	e0 e0       	ldi	r30, 0x00	; 0
 362:	fa e0       	ldi	r31, 0x0A	; 10
 364:	8e e0       	ldi	r24, 0x0E	; 14
 366:	80 83       	st	Z, r24
	TCA0.SINGLE.PER = 254; //select the resolution
 368:	8e ef       	ldi	r24, 0xFE	; 254
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	86 a3       	std	Z+38, r24	; 0x26
 36e:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CMP0 = 127; //select the duty cycle
 370:	8f e7       	ldi	r24, 0x7F	; 127
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	80 a7       	std	Z+40, r24	; 0x28
 376:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CMP1 = 60; //select the duty cycle
 378:	8c e3       	ldi	r24, 0x3C	; 60
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	82 a7       	std	Z+42, r24	; 0x2a
 37e:	93 a7       	std	Z+43, r25	; 0x2b
	//select Single_Slope_PWM
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
 380:	81 81       	ldd	r24, Z+1	; 0x01
 382:	83 60       	ori	r24, 0x03	; 3
 384:	81 83       	std	Z+1, r24	; 0x01

	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 386:	e0 ea       	ldi	r30, 0xA0	; 160
 388:	f4 e0       	ldi	r31, 0x04	; 4
 38a:	85 89       	ldd	r24, Z+21	; 0x15
 38c:	89 60       	ori	r24, 0x09	; 9
 38e:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL |= PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;
 390:	86 89       	ldd	r24, Z+22	; 0x16
 392:	89 60       	ori	r24, 0x09	; 9
 394:	86 8b       	std	Z+22, r24	; 0x16
	sei();
 396:	78 94       	sei
 398:	ff cf       	rjmp	.-2      	; 0x398 <main+0x3c>

0000039a <do_rand>:
 39a:	8f 92       	push	r8
 39c:	9f 92       	push	r9
 39e:	af 92       	push	r10
 3a0:	bf 92       	push	r11
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ec 01       	movw	r28, r24
 3b0:	68 81       	ld	r22, Y
 3b2:	79 81       	ldd	r23, Y+1	; 0x01
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	9b 81       	ldd	r25, Y+3	; 0x03
 3b8:	61 15       	cp	r22, r1
 3ba:	71 05       	cpc	r23, r1
 3bc:	81 05       	cpc	r24, r1
 3be:	91 05       	cpc	r25, r1
 3c0:	21 f4       	brne	.+8      	; 0x3ca <do_rand+0x30>
 3c2:	64 e2       	ldi	r22, 0x24	; 36
 3c4:	79 ed       	ldi	r23, 0xD9	; 217
 3c6:	8b e5       	ldi	r24, 0x5B	; 91
 3c8:	97 e0       	ldi	r25, 0x07	; 7
 3ca:	2d e1       	ldi	r18, 0x1D	; 29
 3cc:	33 ef       	ldi	r19, 0xF3	; 243
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	0e 94 29 02 	call	0x452	; 0x452 <__divmodsi4>
 3d6:	49 01       	movw	r8, r18
 3d8:	5a 01       	movw	r10, r20
 3da:	9b 01       	movw	r18, r22
 3dc:	ac 01       	movw	r20, r24
 3de:	a7 ea       	ldi	r26, 0xA7	; 167
 3e0:	b1 e4       	ldi	r27, 0x41	; 65
 3e2:	0e 94 48 02 	call	0x490	; 0x490 <__muluhisi3>
 3e6:	6b 01       	movw	r12, r22
 3e8:	7c 01       	movw	r14, r24
 3ea:	ac ee       	ldi	r26, 0xEC	; 236
 3ec:	b4 ef       	ldi	r27, 0xF4	; 244
 3ee:	a5 01       	movw	r20, r10
 3f0:	94 01       	movw	r18, r8
 3f2:	0e 94 56 02 	call	0x4ac	; 0x4ac <__mulohisi3>
 3f6:	dc 01       	movw	r26, r24
 3f8:	cb 01       	movw	r24, r22
 3fa:	8c 0d       	add	r24, r12
 3fc:	9d 1d       	adc	r25, r13
 3fe:	ae 1d       	adc	r26, r14
 400:	bf 1d       	adc	r27, r15
 402:	b7 ff       	sbrs	r27, 7
 404:	03 c0       	rjmp	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	a1 09       	sbc	r26, r1
 40a:	b0 48       	sbci	r27, 0x80	; 128
 40c:	88 83       	st	Y, r24
 40e:	99 83       	std	Y+1, r25	; 0x01
 410:	aa 83       	std	Y+2, r26	; 0x02
 412:	bb 83       	std	Y+3, r27	; 0x03
 414:	9f 77       	andi	r25, 0x7F	; 127
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	9f 90       	pop	r9
 428:	8f 90       	pop	r8
 42a:	08 95       	ret

0000042c <rand_r>:
 42c:	0e 94 cd 01 	call	0x39a	; 0x39a <do_rand>
 430:	08 95       	ret

00000432 <rand>:
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	98 e2       	ldi	r25, 0x28	; 40
 436:	0e 94 cd 01 	call	0x39a	; 0x39a <do_rand>
 43a:	08 95       	ret

0000043c <srand>:
 43c:	a0 e0       	ldi	r26, 0x00	; 0
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 444:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 448:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 44c:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 450:	08 95       	ret

00000452 <__divmodsi4>:
 452:	05 2e       	mov	r0, r21
 454:	97 fb       	bst	r25, 7
 456:	1e f4       	brtc	.+6      	; 0x45e <__divmodsi4+0xc>
 458:	00 94       	com	r0
 45a:	0e 94 40 02 	call	0x480	; 0x480 <__negsi2>
 45e:	57 fd       	sbrc	r21, 7
 460:	07 d0       	rcall	.+14     	; 0x470 <__divmodsi4_neg2>
 462:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__udivmodsi4>
 466:	07 fc       	sbrc	r0, 7
 468:	03 d0       	rcall	.+6      	; 0x470 <__divmodsi4_neg2>
 46a:	4e f4       	brtc	.+18     	; 0x47e <__divmodsi4_exit>
 46c:	0c 94 40 02 	jmp	0x480	; 0x480 <__negsi2>

00000470 <__divmodsi4_neg2>:
 470:	50 95       	com	r21
 472:	40 95       	com	r20
 474:	30 95       	com	r19
 476:	21 95       	neg	r18
 478:	3f 4f       	sbci	r19, 0xFF	; 255
 47a:	4f 4f       	sbci	r20, 0xFF	; 255
 47c:	5f 4f       	sbci	r21, 0xFF	; 255

0000047e <__divmodsi4_exit>:
 47e:	08 95       	ret

00000480 <__negsi2>:
 480:	90 95       	com	r25
 482:	80 95       	com	r24
 484:	70 95       	com	r23
 486:	61 95       	neg	r22
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	8f 4f       	sbci	r24, 0xFF	; 255
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	08 95       	ret

00000490 <__muluhisi3>:
 490:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__umulhisi3>
 494:	a5 9f       	mul	r26, r21
 496:	90 0d       	add	r25, r0
 498:	b4 9f       	mul	r27, r20
 49a:	90 0d       	add	r25, r0
 49c:	a4 9f       	mul	r26, r20
 49e:	80 0d       	add	r24, r0
 4a0:	91 1d       	adc	r25, r1
 4a2:	11 24       	eor	r1, r1
 4a4:	08 95       	ret

000004a6 <__mulshisi3>:
 4a6:	b7 ff       	sbrs	r27, 7
 4a8:	0c 94 48 02 	jmp	0x490	; 0x490 <__muluhisi3>

000004ac <__mulohisi3>:
 4ac:	0e 94 48 02 	call	0x490	; 0x490 <__muluhisi3>
 4b0:	82 1b       	sub	r24, r18
 4b2:	93 0b       	sbc	r25, r19
 4b4:	08 95       	ret

000004b6 <__udivmodsi4>:
 4b6:	a1 e2       	ldi	r26, 0x21	; 33
 4b8:	1a 2e       	mov	r1, r26
 4ba:	aa 1b       	sub	r26, r26
 4bc:	bb 1b       	sub	r27, r27
 4be:	fd 01       	movw	r30, r26
 4c0:	0d c0       	rjmp	.+26     	; 0x4dc <__udivmodsi4_ep>

000004c2 <__udivmodsi4_loop>:
 4c2:	aa 1f       	adc	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	ee 1f       	adc	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	a2 17       	cp	r26, r18
 4cc:	b3 07       	cpc	r27, r19
 4ce:	e4 07       	cpc	r30, r20
 4d0:	f5 07       	cpc	r31, r21
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__udivmodsi4_ep>
 4d4:	a2 1b       	sub	r26, r18
 4d6:	b3 0b       	sbc	r27, r19
 4d8:	e4 0b       	sbc	r30, r20
 4da:	f5 0b       	sbc	r31, r21

000004dc <__udivmodsi4_ep>:
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	1a 94       	dec	r1
 4e6:	69 f7       	brne	.-38     	; 0x4c2 <__udivmodsi4_loop>
 4e8:	60 95       	com	r22
 4ea:	70 95       	com	r23
 4ec:	80 95       	com	r24
 4ee:	90 95       	com	r25
 4f0:	9b 01       	movw	r18, r22
 4f2:	ac 01       	movw	r20, r24
 4f4:	bd 01       	movw	r22, r26
 4f6:	cf 01       	movw	r24, r30
 4f8:	08 95       	ret

000004fa <__umulhisi3>:
 4fa:	a2 9f       	mul	r26, r18
 4fc:	b0 01       	movw	r22, r0
 4fe:	b3 9f       	mul	r27, r19
 500:	c0 01       	movw	r24, r0
 502:	a3 9f       	mul	r26, r19
 504:	70 0d       	add	r23, r0
 506:	81 1d       	adc	r24, r1
 508:	11 24       	eor	r1, r1
 50a:	91 1d       	adc	r25, r1
 50c:	b2 9f       	mul	r27, r18
 50e:	70 0d       	add	r23, r0
 510:	81 1d       	adc	r24, r1
 512:	11 24       	eor	r1, r1
 514:	91 1d       	adc	r25, r1
 516:	08 95       	ret

00000518 <_exit>:
 518:	f8 94       	cli

0000051a <__stop_program>:
 51a:	ff cf       	rjmp	.-2      	; 0x51a <__stop_program>
